import re
import random
import asyncio
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.utils.markdown import hbold, hitalic

from auth import add_admin
from config import conf
from logger import logfire, log_span

from lombardis.dto import ClientDetailsResponse, ClientLoanResponse
from lombardis.api import LombardisAPI

from repository import clients
from repository import users

from repository.dto import ClientBasicInfoDTO, UserDTO

# TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.


class RegistrationState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()


def is_valid_phone_number(phone: str) -> bool:
    logfire.info(f"Validating phone: {phone}")
    return bool(re.fullmatch(r"(?:\+7|7|8)\d{10}", phone))


def format_phone_number(phone: str) -> str:
    """Formats a validated phone number to start with +7."""
    phone = re.sub(r"[^\d]", "", phone)  # Remove any non-numeric characters
    if phone.startswith("8") or phone.startswith("7"):
        phone = "+7" + phone[-10:]  # Ensure it starts with +7 and keep last 10 digits
    return phone


def format_client_info(client: ClientBasicInfoDTO, full_name: str) -> str:
    """Formats client debt information into a readable message in Russian."""
    nearest_payment = (
        datetime.fromisoformat(client.nearestPaymentDate).strftime("%d.%m.%Y")
        if client.nearestPaymentDate
        else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    )

    return (
        f"{hbold(full_name)}\n\n"
        f"{hbold('üí∞ –ü–æ–ª–Ω—ã–π –¥–æ–ª–≥:')} {hitalic(f'{client.fullDebt:.2f} ‚ÇΩ')}\n"
        f"{hbold('üí∏ –ü—Ä–æ—Ü–µ–Ω—Ç—ã:')} {hitalic(f'{client.fullInterestsDebt:.2f} ‚ÇΩ')}\n"
        f"{hbold('‚è≥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥:')} {hitalic(f'{client.overdueDebt:.2f} ‚ÇΩ')}\n"
        f"{hbold('üìâ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:')} {hitalic(f'{client.overdueInterestsDebt:.2f} ‚ÇΩ')}\n\n"
        f"{hbold('üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:')} {nearest_payment}\n"
    )


def get_loans_keyboard(client_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ó–∞–ª–æ–≥–∏ –∏ –æ–ø–ª–∞—Ç–∞'."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –ó–∞–ª–æ–≥–∏ –∏ –æ–ø–ª–∞—Ç–∞", callback_data=f"loans_{client_id}"
                )
            ]
        ]
    )
    return keyboard


async def send_client_info(
    message: Message, client: ClientBasicInfoDTO, full_name: str
) -> None:
    """Sends formatted client information as a message."""
    formatted_text = format_client_info(client, full_name)
    keyboard = get_loans_keyboard(client.clientID)
    await message.answer(formatted_text, reply_markup=keyboard, parse_mode="HTML")


async def send_sms_code(phone: str) -> int:
    code = random.randint(100000, 999999)
    logfire.info(f"Sending SMS with code {code} to {phone}")
    return code


async def loans_handler(message: Message, client_id: str = None) -> None:
    if not client_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–ª–∏–µ–Ω—Ç.")
        return

    client_loans: ClientLoanResponse = await LombardisAPI().get_client_loans(client_id)

    if not client_loans.Loans:
        await message.answer("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ª–æ–≥–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üí∞ {loan.ShortLoanDescription} ({loan.fullDebt:.2f} ‚ÇΩ)",
                    callback_data=f"payloan_{loan.LoanID}",
                )
            ]
            for loan in client_loans.Loans
        ]
    )

    await message.answer(f"üìú –ó–∞–ª–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}:", reply_markup=keyboard)


def setup_handlers(router: Router) -> None:
    @router.message(CommandStart())
    @log_span("/start")
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        if await state.get_state() is None:
            if not await users.user_exists(message.from_user.id):
                await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–º–±–∞—Ä–¥–∞. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–º—Å —Å –∫–æ–¥–æ–º."
                )
                await state.set_state(RegistrationState.waiting_for_phone)
            else:
                user: UserDTO = await users.get_user_by_chat_id(message.from_user.id)

                basic_info = await clients.get_client_info_by_phone(user.phone_number)
                if basic_info is None:
                    # –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
                    # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–≤–µ–∂–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã, —Ç–æ –Ω—É–∂–Ω–æ –µ—ë –æ–±–Ω–æ–≤–∏—Ç—å.
                    await clients.fetch_and_update_local_db()
                    basic_info = await clients.get_client_info_by_phone(
                        user.phone_number
                    )
                await send_client_info(
                    message, client=basic_info, full_name=user.full_name
                )

    @router.message(RegistrationState.waiting_for_phone)
    @log_span("phone")
    async def phone_number_handler(message: Message, state: FSMContext) -> None:
        if is_valid_phone_number(message.text):
            verification_code = await send_sms_code(message.text)
            await state.update_data(phone=message.text, code=verification_code)
            await message.answer(
                "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã."
            )
            await state.set_state(RegistrationState.waiting_for_code)

            await asyncio.sleep(60)
            current_state = await state.get_state()
            if current_state == RegistrationState.waiting_for_code.state:
                await message.answer(
                    "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∑–∞–Ω–æ–≤–æ."
                )
                await state.clear()
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ 89991234567."
            )

    @router.message(RegistrationState.waiting_for_code, F.text)
    @log_span("verification")
    async def code_verification_handler(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        if message.text == str(data.get("code")):
            phone_number = format_phone_number(data.get("phone"))
            client_id = await clients.get_client_id_by_phone(phone_number)

            client_details: ClientDetailsResponse = (
                await LombardisAPI().get_client_details(client_id)
            )
            full_name = " ".join(
                [client_details.surname, client_details.name, client_details.patronymic]
            )
            user = await users.add_user(
                message.from_user.id,
                full_name,
                client_id,
                phone_number,
            )
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            await state.clear()

            basic_info = await clients.get_client_info_by_phone(phone_number)
            if basic_info is None:
                # –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
                # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–≤–µ–∂–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã, —Ç–æ –Ω—É–∂–Ω–æ –µ—ë –æ–±–Ω–æ–≤–∏—Ç—å.
                await clients.fetch_and_update_local_db()
                basic_info = await clients.get_client_info_by_phone(phone_number)

            await send_client_info(message, client=basic_info, full_name=user.full_name)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @router.message(Command("admin"))
    @log_span("/admin")
    async def command_admin_handler(message: Message) -> None:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.")
            logfire.info(
                f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /admin –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—Ç {message.from_user.id}"
            )
            return

        secret = args[1]
        if secret != conf["ADMIN_SECRET"]:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.")
            logfire.info(
                f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω–∫–µ –æ—Ç {message.from_user.id}"
            )
            return

        add_admin(message.from_user.id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")

    @router.callback_query(lambda c: c.data.startswith("loans_"))
    async def process_loans_callback(callback: CallbackQuery) -> None:
        client_id = callback.data.split("_")[1]
        await callback.message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≥–æ–≤...")
        await callback.answer()

        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /loans –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        await loans_handler(callback.message, client_id)

    @router.callback_query(lambda c: c.data.startswith("payloan_"))
    async def process_loan_payment_callback(callback: CallbackQuery) -> None:
        loan_id = callback.data.split("_")[1]
        await callback.message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞ {loan_id}. –ü–æ–∫–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        )
        await callback.answer()


##TODO
# 1. –≤ –∑–∞–ª–æ–≥–∞—Ö –Ω–æ–º–µ—Ä –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞, —Å—É–º–º–∞ –∑–∞–π–º–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∑–∞–ª–æ–≥—É
# 2. –æ–ø–ª–∞—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ª–æ–≥—É —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.
# 3. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–∞–ª–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞, –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã.
# 4. –∑–∞–ª–æ–≥–æ–≤—ã–µ –±–∏–ª–µ—Ç—ã, –∑–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ.
# 5. –ø—Ä–æ—Ü–µ–Ω—Ç—ã –º–∞–Ω–¥–∞—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã.
