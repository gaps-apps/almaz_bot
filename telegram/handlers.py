import asyncio

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
)

from lombardis.schemas import ClientDetailsResponse
from lombardis.api import LombardisAPI

from repository import clients
from repository import users

from repository.dto import UserDTO

from .helpers import (
    answer_debt_information,
    answer_loans_information,
    is_valid_phone_number,
    send_sms_code,
    format_phone_number,
)

# TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.


class RegistrationState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()


def setup_handlers(router: Router) -> None:
    @router.message(CommandStart())
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        if await state.get_state() is None:
            if not await users.user_exists(message.from_user.id):

                await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–º–±–∞—Ä–¥–∞. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–º—Å —Å –∫–æ–¥–æ–º."
                )
                await state.set_state(RegistrationState.waiting_for_phone)
            else:
                await debt_menu_handler(message)

    @router.message(F.text == "üí∞ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    async def debt_menu_handler(message: Message):
        user: UserDTO = await users.get_user_by_params(
            {"chat_id": message.from_user.id}
        )

        basic_info = await clients.get_basic_info_by_params(
            {"phone_number": user.phone_number}
        )
        if basic_info is None:
            # –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
            # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–≤–µ–∂–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã, —Ç–æ –Ω—É–∂–Ω–æ –µ—ë –æ–±–Ω–æ–≤–∏—Ç—å.
            await clients.fetch_and_update_local_db()
            basic_info = await clients.get_basic_info_by_params(
                {"phone_number": user.phone_number}
            )
        await answer_debt_information(
            message, client=basic_info, full_name=user.full_name
        )

    @router.message(F.text == "üí≥ –ó–∞–ª–æ–≥–∏ –∏ –æ–ø–ª–∞—Ç–∞")
    async def loans_menu_handler(message: Message):
        await answer_loans_information(message)

    @router.message(RegistrationState.waiting_for_phone)
    async def phone_number_handler(message: Message, state: FSMContext) -> None:
        if is_valid_phone_number(message.text):
            verification_code = await send_sms_code(message.text)
            await state.update_data(phone=message.text, code=verification_code)
            await message.answer(
                "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã."
            )
            await state.set_state(RegistrationState.waiting_for_code)

            await asyncio.sleep(60)
            current_state = await state.get_state()
            if current_state == RegistrationState.waiting_for_code.state:
                await message.answer(
                    "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∑–∞–Ω–æ–≤–æ."
                )
                await state.clear()
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ 89991234567."
            )

    @router.message(RegistrationState.waiting_for_code, F.text)
    async def code_verification_handler(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        if message.text == str(data.get("code")):
            phone_number = format_phone_number(data.get("phone"))
            client_id = await clients.get_client_id_by_phone(phone_number)

            client_details: ClientDetailsResponse = (
                await LombardisAPI().get_client_details(client_id)
            )
            full_name = " ".join(
                [client_details.surname, client_details.name, client_details.patronymic]
            )
            user = await users.add_user(
                message.from_user.id,
                full_name,
                client_id,
                phone_number,
            )
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            await state.clear()
            await debt_menu_handler(message)

        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @router.callback_query(lambda c: c.data.startswith("payloan_"))
    async def process_loan_payment_callback(callback: CallbackQuery) -> None:
        loan_id = callback.data.split("_")[1]
        await callback.message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞ {loan_id}. –ü–æ–∫–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        )
        await callback.answer()


##TODO
# + 1. –≤ –∑–∞–ª–æ–≥–∞—Ö –Ω–æ–º–µ—Ä –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞, —Å—É–º–º–∞ –∑–∞–π–º–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∑–∞–ª–æ–≥—É
# + 2. –æ–ø–ª–∞—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ª–æ–≥—É —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.
# 3. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–∞–ª–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞, –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã.
# 4. –∑–∞–ª–æ–≥–æ–≤—ã–µ –±–∏–ª–µ—Ç—ã, –∑–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ.
# 5. –ø—Ä–æ—Ü–µ–Ω—Ç—ã –º–∞–Ω–¥–∞—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã.
